// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	cinemas "booking-ticket/business/cinemas"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddCinema provides a mock function with given fields: ctx, domain
func (_m *Repository) AddCinema(ctx context.Context, domain cinemas.Domain) (cinemas.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 cinemas.Domain
	if rf, ok := ret.Get(0).(func(context.Context, cinemas.Domain) cinemas.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(cinemas.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cinemas.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CinemaDetail provides a mock function with given fields: ctx, cinemaId
func (_m *Repository) CinemaDetail(ctx context.Context, cinemaId int) (cinemas.Domain, error) {
	ret := _m.Called(ctx, cinemaId)

	var r0 cinemas.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) cinemas.Domain); ok {
		r0 = rf(ctx, cinemaId)
	} else {
		r0 = ret.Get(0).(cinemas.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, cinemaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCinema provides a mock function with given fields: ctx
func (_m *Repository) ListCinema(ctx context.Context) ([]cinemas.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []cinemas.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []cinemas.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cinemas.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
