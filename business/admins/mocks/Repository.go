// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	admins "booking-ticket/business/admins"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAdmin provides a mock function with given fields: ctx
func (_m *Repository) GetAdmin(ctx context.Context) ([]admins.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []admins.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []admins.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admins.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *Repository) Login(ctx context.Context, email string, password string) (admins.Domain, error) {
	ret := _m.Called(ctx, email, password)

	var r0 admins.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admins.Domain); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(admins.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, domain
func (_m *Repository) Register(ctx context.Context, domain admins.Domain) (admins.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 admins.Domain
	if rf, ok := ret.Get(0).(func(context.Context, admins.Domain) admins.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(admins.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, admins.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
