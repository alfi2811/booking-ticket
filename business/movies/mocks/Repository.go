// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	movies "booking-ticket/business/movies"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddMovie provides a mock function with given fields: ctx, domain
func (_m *Repository) AddMovie(ctx context.Context, domain movies.Domain) (movies.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 movies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, movies.Domain) movies.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(movies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, movies.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetailMovie provides a mock function with given fields: ctx, idMovie
func (_m *Repository) DetailMovie(ctx context.Context, idMovie int) (movies.Domain, error) {
	ret := _m.Called(ctx, idMovie)

	var r0 movies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) movies.Domain); ok {
		r0 = rf(ctx, idMovie)
	} else {
		r0 = ret.Get(0).(movies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, idMovie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMovie provides a mock function with given fields: ctx
func (_m *Repository) ListMovie(ctx context.Context) ([]movies.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []movies.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []movies.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]movies.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
