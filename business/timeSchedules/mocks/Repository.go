// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	timeSchedules "booking-ticket/business/timeSchedules"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddScheduleTime provides a mock function with given fields: ctx, domain
func (_m *Repository) AddScheduleTime(ctx context.Context, domain timeSchedules.Domain) (timeSchedules.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 timeSchedules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, timeSchedules.Domain) timeSchedules.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(timeSchedules.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, timeSchedules.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetailScheduleTime provides a mock function with given fields: ctx, idSchedule
func (_m *Repository) DetailScheduleTime(ctx context.Context, idSchedule int) ([]timeSchedules.Domain, error) {
	ret := _m.Called(ctx, idSchedule)

	var r0 []timeSchedules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []timeSchedules.Domain); ok {
		r0 = rf(ctx, idSchedule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]timeSchedules.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, idSchedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
