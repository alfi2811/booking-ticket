// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	bookings "booking-ticket/business/bookings"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddBooking provides a mock function with given fields: ctx, domain
func (_m *Repository) AddBooking(ctx context.Context, domain bookings.Domain) (bookings.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 bookings.Domain
	if rf, ok := ret.Get(0).(func(context.Context, bookings.Domain) bookings.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(bookings.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bookings.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetailBooking provides a mock function with given fields: ctx, bookingId
func (_m *Repository) DetailBooking(ctx context.Context, bookingId int) (bookings.Domain, error) {
	ret := _m.Called(ctx, bookingId)

	var r0 bookings.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) bookings.Domain); ok {
		r0 = rf(ctx, bookingId)
	} else {
		r0 = ret.Get(0).(bookings.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, bookingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBooking provides a mock function with given fields: ctx
func (_m *Repository) ListBooking(ctx context.Context) ([]bookings.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []bookings.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []bookings.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bookings.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBookingUser provides a mock function with given fields: ctx, userId
func (_m *Repository) ListBookingUser(ctx context.Context, userId int) ([]bookings.DomainJoin, error) {
	ret := _m.Called(ctx, userId)

	var r0 []bookings.DomainJoin
	if rf, ok := ret.Get(0).(func(context.Context, int) []bookings.DomainJoin); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bookings.DomainJoin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
